Aula 1: O que é, conceitos
    Problemas de programar sem versionamento
    1: Não conseguir voltar as alterações efetuadas.
    2: Mesmo arquivo sendo editado por 2 ou mais programadores (código sobrescrito)

    Solução: Versionamento
        Tecnologias:
            GIT:
                GITHub
                Bit Bucket
            CVS, SVN, Mercurial
Aula 2: Instalando
    Conceito de Repositório
    Instalando:
    1) Ir em https://git-scm.com/downloads e ir em Download
    2) Baixar e instalar

Aula 3: Configurando
    Abrir o CMD
    1) Configurar nome: > git config --global user.name "Vicente Cruz"
    2) Configurar e-mail: > git config --global user.email "vicentesc@daer.rs.gov.br"

    Para visualizar configuração específica. Ex: nome.
    > git config user.name

    Para listar todas as configurações.
    > git config --list

Aula 4: Criando e iniciando repositório
    Uso básico de um terminal shell/cmd. Comandos CD, DIR/LS, MKDIR, etc...
    1) Ir até a pasta do projeto:
    > cd xampp/htdocs/cursophp/modulo_git

    2) Iniciar um repositório:
    > git init

    3) Será criada a seguinte estrutura de diretórios:
    .git/
        hooks/ (vários shellscripts chamados pre-*.sample ex:pre-push.sample, etc...)
        info/
            exclude
        objects/
            info/
            pack/
        refs/
            head/
            tags/
        config
        description
        HEAD

Aula 5: Branchs e primeiro commit
    Branch: versões diferentes do sistema
        master: Versão principal do sistema. Primeiro branch, criado automaticamente.
    Commit: Envio dos arquivos modificados para o GIT.
        "Comentar as alterações"
    0) Executar o git branch para listar todos os branchs existentes (no momento, só o master)
        > git branch
    1) Criar o arquivo README.txt ou README.md e escrever alguma coisa nele
    2) No CMD, dentro da pasta do projeto, digitar git status
        > git status
    3) Adicionar os arquivos criados ao "monitoramento" do GIT
        > git add -A
    4) Efetuar o "commit" com comentário
        > git commit -m "Primeiro Commit"
    5) Ver os registros dos commits com "git log".
        > git log
    6) Testar um "segundo commit".
       a) Modificar o README.md e criar outros arquivos, ex: index.html, style.css
       b) executer "git status" e ver as notificações de arquivos alterados e novos
        > git status
       c) adicionar novos arquivos
        > git add -A
       d) Efetuar o segundo commit
        > git commit -m "README.md modificado, index.html e style.css criados"
       e) Ver de novo no status.
        > git status

Aula 6: Revertendo modificações:
    1) Executar o git log e ver "OS 7 PRIMEIROS NÚMEROS" do commit desejado.
        > git log
		
    2) Fazer alterações aleatórias no branch.
        a) Modificar "README.md" e criar novo arquivo (ex: script.js)
		
    3) Fazer o GIT mostrar o que foi alterado com "git status"
        > git status
		
    4) Adicionar os arquivos criados com "git add -A"
        > git add script.js
		
    5) Efetuar o segundo "commit"
        > git commit -m "Novo commit com alterações em README.md e adição de script.js"
	
    6) Reverter com git reset -<soft | mixed | hard> usando o numero do log que se deseja reverter
        > git reset --hard e4f875d43d3456143fe819792251c23823e7cfd9
		
	7) Recriar o arquivo script.js e efetuar commit
	
Aula 7: Navegando entre os branches
	1) "git branch" mostra todos os branches, o asterisco mostra o branch selecionado
	2) Criar o branch 'teste'
		> git branch teste
	3) Mudar para o 'teste'
		> git checkout teste
	4) Criar os arquivos "branch_teste_README.md" e "branch_teste_script.js" e fazer o commit neles
		> git commit -am "Commitando no branch 'teste'!"
	5) Voltar para o branch master
		> git checkout master
	6) Executar 'git status' e ver que os novos arquivos criados não são reconhecidos no branch master
		> git status