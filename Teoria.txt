Aula 1: O que é, conceitos
    Problemas de programar sem versionamento
    1: Não conseguir voltar as alterações efetuadas.
    2: Mesmo arquivo sendo editado por 2 ou mais programadores (código sobrescrito)

    Solução: Versionamento
        Tecnologias:
            GIT:
                GITHub
                Bit Bucket
            CVS, SVN, Mercurial
Aula 2: Instalando
    Conceito de Repositório
    Instalando:
    1) Ir em https://git-scm.com/downloads e ir em Download
    2) Baixar e instalar

Aula 3: Configurando
    Abrir o CMD
    1) Configurar nome: > git config --global user.name "Vicente Cruz"
    2) Configurar e-mail: > git config --global user.email "vicentesc@daer.rs.gov.br"

    Para visualizar configuração específica. Ex: nome.
    > git config user.name

    Para listar todas as configurações.
    > git config --list

Aula 4: Criando e iniciando repositório
    Uso básico de um terminal shell/cmd. Comandos CD, DIR/LS, MKDIR, etc...
    1) Ir até a pasta do projeto:
    > cd xampp/htdocs/cursophp/modulo_git

    2) Iniciar um repositório:
    > git init

    3) Será criado o diretório '.git/' com a seguinte estrutura de diretórios:
    .git/
        hooks/ (vários shellscripts chamados pre-*.sample ex:pre-push.sample, etc...)
        info/
            exclude
        objects/
            info/
            pack/
        refs/
            head/
            tags/
        config
        description
        HEAD
    Obs: Para excluir o repositório basta deletar o diretório '.git/'

Aula 5: Branchs e primeiro commit
    Branch: versões diferentes do sistema
        master: Versão principal do sistema. Primeiro branch, criado automaticamente.
    Commit: Envio dos arquivos modificados para o GIT.
        "Comentar as alterações"
    0) Executar o git branch para listar todos os branchs existentes (no momento, só o master)
        > git branch
    1) Criar o arquivo README.txt ou README.md e escrever alguma coisa nele
    2) No CMD, dentro da pasta do projeto, digitar git status
        > git status
    3) Adicionar os arquivos criados ao "monitoramento" do GIT
        > git add -A
    4) Efetuar o "commit" com comentário
        > git commit -m "Primeiro Commit"
    5) Ver os registros dos commits com "git log".
        > git log
    6) Testar um "segundo commit".
       a) Modificar o README.md e criar outros arquivos, ex: index.html, style.css
       b) executer "git status" e ver as notificações de arquivos alterados e novos
        > git status
       c) adicionar novos arquivos
        > git add -A
       d) Efetuar o segundo commit
        > git commit -m "README.md modificado, index.html e style.css criados"
       e) Ver de novo no status.
        > git status

Aula 6: Revertendo modificações:
    1) Executar o git log e ver "OS 7 PRIMEIROS NÚMEROS" do commit desejado.
        > git log
		
    2) Fazer alterações aleatórias no branch.
        a) Modificar "README.md" e criar novo arquivo (ex: script.js)
		
    3) Fazer o GIT mostrar o que foi alterado com "git status"
        > git status
		
    4) Adicionar os arquivos criados com "git add -A" ou "git add script.js"
        > git add -A
		
    5) Efetuar o segundo "commit"
        > git commit -m "Novo commit com alterações em README.md e adição de script.js"
	
    6) Reverter com git reset -<soft | mixed | hard> usando o numero do log que se deseja reverter
        > git reset --hard e4f875d43d3456143fe819792251c23823e7cfd9
		
    7) Recriar o arquivo script.js e efetuar commit

    OBS: Para efetuar commit apenas de um arquivo:
        > git commit -m "Meu commit" /caminho/para/arquivo.js
	
Aula 7: Navegando entre os branches
	1) "git branch" mostra todos os branches, o asterisco mostra o branch selecionado
	2) Criar o branch 'teste'
		> git branch teste
	3) Mudar para o 'teste'
		> git checkout teste
	4) Criar os arquivos "branch_teste_README.md" e "branch_teste_script.js" e fazer o commit neles
		> git commit -am "Commitando no branch 'teste'!"
	5) Voltar para o branch master
		> git checkout master
	6) Executar 'git status' e ver que os novos arquivos criados não são reconhecidos no branch master
		> git status
		
Aula 8: Arquivos commitados e os que estão no PC.
	Diferenças são mostradas com "git diff" e "git diff --name-only".
	1) Alterar o arquivo "README.md"
	2) executar "git diff" e ver as modificações realizadas
		> git diff
	3) Listar o nome dos arquivos modificados com "git diff --name-only"
		> git diff --name-only
	4) Editar outro arquivo, por ex: "script.js", e efetuar o "git diff" e "git diff --name-only".
		> git diff
		> git diff --name-only
	5) Desfazer as alterações feitas em "script.js" com "git checkout HEAD -- script.js".
		OBS: HEAD indica o BRANCH atual.
		> git checkout HEAD -- script.js
	6) Fazer um "git diff" e notar que de fato as alterações foram desfeitas em script.js.
		Notar que apenas README.md está modificado.
		> git diff
	7) Fazer o mesmo para verificar apenas o nome do arquivo modificado é o "README.md" e não mais "script.js"
		> git diff --name-only
	8) Fazer o commit.
		> git commit -am "Novo commit em README.md"
		
Aula 9: Criando repositório no Github
	1) Entrar em https://www.github.com e criar uma conta.
	2) Clicar em "Create new repository".
	3) Dar um nome para o repositório em 'Repository name', uma descrição e definir como público.
	
Aula 10: Conectar repositório local
	1) Criar uma chave SSH.
		Tutorial: https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/
		a) Abrir o Git Bash (já vem instalado)
		b) Digitar o comando 'ssh-keygen.exe -t rsa -b 4096 -C "<email_da_conta_do_github>"'
			$ ssh-keygen.exe -t rsa -b 4096 -C "vicruz81@yahoo.com.br"
			  i) Quando pedir caminho, aperte enter
				  $ Enter file in which to save the key (/u//.ssh/id_rsa):
			 ii) Informar o passphrase, confirmar depois:
				  $ Enter passphrase (empty for no passphrase):
			iii) Abrir o arquivo contendo a chave pública do diretório informado na criação (ex: /u//.ssh/id_rsa)
			 iv) Copiar seu conteúdo.
			  v) Ir em "settings" -> SSH and GPG keys -> Clicar em "New SSH Key".
			 vi) Dar um titulo, colar o conteúdo de  em "Key" e clicar em "Add SSH Key"
			 
	2) Ir no repositório criado na aula 9.
	
	3) Adicionar o repositório remoto com o repositório da local
		a) Copiar o texto da página do repositório: git remote add origin https://github.com/vicente-cruz/modulogit.git
		b) Executar esse comando na máquina local.
			> git remote add origin https://github.com/vicente-cruz/modulogit.git
		c) Verificar se o repositório foi adicionado com "git remote" ou "git remote -v". Será mostrado "origin"
			> git remote
			> git remote -v
		d) fetch: puxa conteúdo do repositório remoto para o local.
		e) push: o contrário.
	4) Enviar os arquivos do repositório local para o remoto com "git push -u origin <nome_branch>".
		OBS: CONFIGURAR Git para usar PROXY:
		> git config --global http.proxy http://<usuario>:<senha>@<ip_proxy>:<porta_proxy>
		> git push -u origin master
		OBS: Habilitação de DEBUG para analisar a conexão c/servidor remoto.
		a) Para debug, definir as variáveis de ambiente GIT_CURL_VERBOSE e GIT_TRACE para 1
			> set GIT_CURL_VERBOSE=1
			> set GIT_TRACE=1
			> git push -u origin master
			
Aula 11: Alterações no repositório remoto
	1) Alterar o README.md e crie um arquivo novo (ex: aula11_index.html)
	
	2) Adicionar o arquivo aula11_index.html ao repositório
		> git add aula11_index.html
	
	3) Efetuar o commit
		> git commit -am "Commit da alteração do README.md e criação do aula11_index.html"
		
	4) Mandar os arquivos para o repositório remoto, no Github.
		> git push -u origin master
		
	5) Analisar no repositorio remoto se os arquivos estão lá.
	
	6) Modificar novamente README.md, modificar aula11_index.html e criar a pasta assets/ e, dentro dela, o arquivo script.js
	
	7) Adicionar todos os arquivos criados
		> git add -A
	
	8) Efetuar o commit.
		> git commit -am "Novas alteracoes em readme.md e aula11_index.html. Criacao de assets/script.js"
		
	9) Mandar as alteracoes para o Github
		> git push -u origin master
	
	10) Analisar no repositorio remoto se os arquivos estão lá.

        11) Remover um arquivo ou diretorio do repositorio remoto:
            11.1) Removendo arquivo:
                > git rm --cached aula11_index.html
            11.2) Removendo diretorio:
                > git rm --cached -r meu_diretorio
	
Aula 12: Ignorando arquivos do repositório.
	1) Criar um arquivo qualquer. Ex: backup_db.sql e senhas.txt
	
	2) Fazer git status para ver as alterações
		> git status
		
	3) criar o arquivo .gitignore e editá-lo
	
	4) Inserir dentro dele o nome do arquivo a ser ignorado. Ex: backup_db.sql
		
	5) Efetuar novo git status e notar que o arquivo inserido no .gitignore sumiu da lista dos alterados
		> git status
		
	6) Ignorar todos os arquivos com extensão .txt.
		a) inserir no arquivo .gitignore a linha *.txt
		
Aula 13: Git Revert (Salvador de sexta-feiras)
	Reverte para um commit anterior "mantendo as alterações" efetuadas. Diferente do git reset
	Ex: Commit atual é o 6. Deseja-se voltar para o commit 3. git revert volta ao 3 mantendo as alterações em 4, 5 e 6.
	
	1) Alterar o conteúdo do README.md e do index.html
	
	2) Efetuar o commit.
		> git commit -am "Alteracoes em README.md e index.html"
		
	3) Efetuar o git log para ver todos os commits efetuados.
		> git log
	
	4) Assumindo que há erros no novo commit, reverter para o commit anterior usando o código do commit atual.
		> git revert --no-edit 59ca339baf2a3ed1fedc0f7763d8f9e0e2d1d238
		
	5) Notar que foi criado um novo commit, e que o commit com "erro" ainda existe para que possa ser analisado.
	
Aula 14: Deletando Branches.
	1) Listar os branches existentes
		> git branch
		
	2) Ir para o branch teste
		> git checkout teste
		
	3) Mandar os arquivos deste branch para o Github
		> git push -u origin teste
		OBS: Será criado um novo branch chamado 'teste' no Github.
		
	4) Remover esse branch novo do Github
		> git push origin :teste
		
	5) Deletar esse branch localmente
		a) ir para o branch master
		> git checkout master
		
		b) deletar com git branch -D <nome_branch>
		> git branch -D teste
		
Aula 15) Puxar alterações dos outros: comando PULL
	Comando 'pull' é o oposto do 'push'
	1) Criar um novo arquivo diretamente no Github, no branch 'master'.
		a) clicar em "create new file"
		b) Dar um nome e escrever algo em "<> Edit new file". Ex: aula15_teste.js
		c) Selecionar "Commit directly to the master branch." e clicar em "Commit new file"
	
	2) Puxar os arquivos do Github para o repositório local
		> git pull origin master
		
	3) Verificar que o arquivo aula15_teste.js e os logs feitos remotamente estão na máquina local
		> git log
		OBS: notar no log que o Author é diferente do Author local.
		DICA: antes de dar o PUSH, dar o PULL. Assim tudo fica sincronizado.
		
Aula 16) Clonando repositórios remotos.
	Clona um repositório remoto (que não é do usuário) para a máquina local.
	1) Criar um novo diretório diferente do que se vem trabalhando até então.
	Ex: criar o diretório modulo_GIT_clone e ir até ele
	
	2) Dentro do novo diretorio, executar o git clone com a URL do repositório desejado. Ex: o criado nas aulas prévias.
		> git clone https://github.com/vicente-cruz/modulogit
		
	3) Verificar que todos os arquivos do repositório remoto de fato estão na máquina local, inclusive todos os logs.
	
Aula 17) Colaborando com outros repositórios diferente dos criados por mim. Comando FORK.
	Não é possível executar PUSH normalmente. Deve-se criar um FORK.
	Ex: Deseja-se colaborar com o projeto Facebook php-graph-sdk
	1) Na página inicial do Github, buscar por php-graph-sdk em "search"
	
	2) Clicar no botão "Fork"
	
	3) Notar que o repositório desse projeto foi adicionado o repositório do usuário.
	Obs: notar que o nome atual é <meu_usuário>/php-graph-sdk. Ex: vicente-cruz/php-graph-sdk
	Obs2: Notar que há o link para a página do projeto oficial. Ex: https://developers.facebook.com/docs/php
	
	4) Fazer clonar esse projeto para a máquina local com git clone.
		> git clone https://github.com/vicente-cruz/php-graph-sdk
		Dica: É altamente recomendável criar um novo diretório para clonar o novo repositório.

	5) Ver qual é o nome do branch que foi criado:
		> git branch
		Obs: atualmente é o branch 5.x
	
	5) Abrir o arquivo php-graph-sdk/src/Facebook/Authentication/OAuth2Client.php, alterar algumas coisas e salvar.
	Ex: comentar a linha que contém o código "const BASE_AUTHORIZATION_URL = 'https://www.facebook.com';"
	
	6) Executar git status e notar que o GIT detectou que houve a alteração no arquivo.
		> git status
		
	7) Efetuar o commit
		> git commit -am "Comentada a linha const BASE_AUTHENTICATION_URL"
	
	8) Verificar qual o nome do repositório remoto deste projeto com git remote
		> git remote -v 
		Coincidentemente também se chama 'origin'
		
	9) Fazer um push
		> git push origin 5.x
		
	10) Verificar de fato que no Github as alterações foram feitas.
	
	11) Enviar a alteração para o projeto original (obviamente necessita aprovação do criador)
		a) No Github, página inicial do repositório, clicar em "New pull request"
		b) Na nova tela, verificar se o base fork possui o repositório oficial e se o head fork, o do usuário.
			ex: "base fork: facebook/php-graph-sdk | base: 5.x" "head fork:vicente-cruz/php-graph-sdk | base: 5.x"
		c) Clicar em "Create pull request"
		d) Na nova tela, na aba "Write" inserir as informações sobre as modificações feitas que podem contribuir para o projeto original.
		e) Após informar tudo, clicar em "Create pull request". O criador deverá analisar as informações e, se concordar, as adicionará ao projeto original.

        12) Para deletar o repositório do fork:
            a) Ir no repositório que se deseja excluir -> clicar em settings
            b) Descer até o fim da página e clicar em "Delete this repository button"
            c) No pop up, digitar o nome do repositório a ser deletado e clicar em "I understand the consequences, delete the repository"
            Dica: https://stackoverflow.com/questions/11302639/delete-forked-repo-from-github